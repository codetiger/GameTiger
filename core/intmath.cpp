#include "intmath.h"

static const Unit sinTable[SIN_TABLE_LENGTH] = {
    (0*FRACTIONS_PER_UNIT)/511, (6*FRACTIONS_PER_UNIT)/511, 
    (12*FRACTIONS_PER_UNIT)/511, (18*FRACTIONS_PER_UNIT)/511, 
    (25*FRACTIONS_PER_UNIT)/511, (31*FRACTIONS_PER_UNIT)/511, 
    (37*FRACTIONS_PER_UNIT)/511, (43*FRACTIONS_PER_UNIT)/511, 
    (50*FRACTIONS_PER_UNIT)/511, (56*FRACTIONS_PER_UNIT)/511, 
    (62*FRACTIONS_PER_UNIT)/511, (68*FRACTIONS_PER_UNIT)/511, 
    (74*FRACTIONS_PER_UNIT)/511, (81*FRACTIONS_PER_UNIT)/511, 
    (87*FRACTIONS_PER_UNIT)/511, (93*FRACTIONS_PER_UNIT)/511, 
    (99*FRACTIONS_PER_UNIT)/511, (105*FRACTIONS_PER_UNIT)/511, 
    (111*FRACTIONS_PER_UNIT)/511, (118*FRACTIONS_PER_UNIT)/511, 
    (124*FRACTIONS_PER_UNIT)/511, (130*FRACTIONS_PER_UNIT)/511, 
    (136*FRACTIONS_PER_UNIT)/511, (142*FRACTIONS_PER_UNIT)/511, 
    (148*FRACTIONS_PER_UNIT)/511, (154*FRACTIONS_PER_UNIT)/511, 
    (160*FRACTIONS_PER_UNIT)/511, (166*FRACTIONS_PER_UNIT)/511, 
    (172*FRACTIONS_PER_UNIT)/511, (178*FRACTIONS_PER_UNIT)/511, 
    (183*FRACTIONS_PER_UNIT)/511, (189*FRACTIONS_PER_UNIT)/511, 
    (195*FRACTIONS_PER_UNIT)/511, (201*FRACTIONS_PER_UNIT)/511, 
    (207*FRACTIONS_PER_UNIT)/511, (212*FRACTIONS_PER_UNIT)/511, 
    (218*FRACTIONS_PER_UNIT)/511, (224*FRACTIONS_PER_UNIT)/511, 
    (229*FRACTIONS_PER_UNIT)/511, (235*FRACTIONS_PER_UNIT)/511, 
    (240*FRACTIONS_PER_UNIT)/511, (246*FRACTIONS_PER_UNIT)/511, 
    (251*FRACTIONS_PER_UNIT)/511, (257*FRACTIONS_PER_UNIT)/511, 
    (262*FRACTIONS_PER_UNIT)/511, (268*FRACTIONS_PER_UNIT)/511, 
    (273*FRACTIONS_PER_UNIT)/511, (278*FRACTIONS_PER_UNIT)/511, 
    (283*FRACTIONS_PER_UNIT)/511, (289*FRACTIONS_PER_UNIT)/511, 
    (294*FRACTIONS_PER_UNIT)/511, (299*FRACTIONS_PER_UNIT)/511, 
    (304*FRACTIONS_PER_UNIT)/511, (309*FRACTIONS_PER_UNIT)/511, 
    (314*FRACTIONS_PER_UNIT)/511, (319*FRACTIONS_PER_UNIT)/511, 
    (324*FRACTIONS_PER_UNIT)/511, (328*FRACTIONS_PER_UNIT)/511, 
    (333*FRACTIONS_PER_UNIT)/511, (338*FRACTIONS_PER_UNIT)/511, 
    (343*FRACTIONS_PER_UNIT)/511, (347*FRACTIONS_PER_UNIT)/511, 
    (352*FRACTIONS_PER_UNIT)/511, (356*FRACTIONS_PER_UNIT)/511, 
    (361*FRACTIONS_PER_UNIT)/511, (365*FRACTIONS_PER_UNIT)/511, 
    (370*FRACTIONS_PER_UNIT)/511, (374*FRACTIONS_PER_UNIT)/511, 
    (378*FRACTIONS_PER_UNIT)/511, (382*FRACTIONS_PER_UNIT)/511, 
    (386*FRACTIONS_PER_UNIT)/511, (391*FRACTIONS_PER_UNIT)/511, 
    (395*FRACTIONS_PER_UNIT)/511, (398*FRACTIONS_PER_UNIT)/511, 
    (402*FRACTIONS_PER_UNIT)/511, (406*FRACTIONS_PER_UNIT)/511, 
    (410*FRACTIONS_PER_UNIT)/511, (414*FRACTIONS_PER_UNIT)/511, 
    (417*FRACTIONS_PER_UNIT)/511, (421*FRACTIONS_PER_UNIT)/511, 
    (424*FRACTIONS_PER_UNIT)/511, (428*FRACTIONS_PER_UNIT)/511, 
    (431*FRACTIONS_PER_UNIT)/511, (435*FRACTIONS_PER_UNIT)/511, 
    (438*FRACTIONS_PER_UNIT)/511, (441*FRACTIONS_PER_UNIT)/511, 
    (444*FRACTIONS_PER_UNIT)/511, (447*FRACTIONS_PER_UNIT)/511, 
    (450*FRACTIONS_PER_UNIT)/511, (453*FRACTIONS_PER_UNIT)/511, 
    (456*FRACTIONS_PER_UNIT)/511, (459*FRACTIONS_PER_UNIT)/511, 
    (461*FRACTIONS_PER_UNIT)/511, (464*FRACTIONS_PER_UNIT)/511, 
    (467*FRACTIONS_PER_UNIT)/511, (469*FRACTIONS_PER_UNIT)/511, 
    (472*FRACTIONS_PER_UNIT)/511, (474*FRACTIONS_PER_UNIT)/511, 
    (476*FRACTIONS_PER_UNIT)/511, (478*FRACTIONS_PER_UNIT)/511, 
    (481*FRACTIONS_PER_UNIT)/511, (483*FRACTIONS_PER_UNIT)/511, 
    (485*FRACTIONS_PER_UNIT)/511, (487*FRACTIONS_PER_UNIT)/511, 
    (488*FRACTIONS_PER_UNIT)/511, (490*FRACTIONS_PER_UNIT)/511, 
    (492*FRACTIONS_PER_UNIT)/511, (494*FRACTIONS_PER_UNIT)/511, 
    (495*FRACTIONS_PER_UNIT)/511, (497*FRACTIONS_PER_UNIT)/511, 
    (498*FRACTIONS_PER_UNIT)/511, (499*FRACTIONS_PER_UNIT)/511, 
    (501*FRACTIONS_PER_UNIT)/511, (502*FRACTIONS_PER_UNIT)/511, 
    (503*FRACTIONS_PER_UNIT)/511, (504*FRACTIONS_PER_UNIT)/511, 
    (505*FRACTIONS_PER_UNIT)/511, (506*FRACTIONS_PER_UNIT)/511, 
    (507*FRACTIONS_PER_UNIT)/511, (507*FRACTIONS_PER_UNIT)/511, 
    (508*FRACTIONS_PER_UNIT)/511, (509*FRACTIONS_PER_UNIT)/511, 
    (509*FRACTIONS_PER_UNIT)/511, (510*FRACTIONS_PER_UNIT)/511, 
    (510*FRACTIONS_PER_UNIT)/511, (510*FRACTIONS_PER_UNIT)/511, 
    (510*FRACTIONS_PER_UNIT)/511, (510*FRACTIONS_PER_UNIT)/511
};

Unit intSqrt(Unit v) {
    int8_t sign = 1;
    if (v < 0) {
        sign = -1;
        v *= -1;
    }

    uint32_t result = 0;
    uint32_t a = v;
    uint32_t b = 1u << 30;

    while (b > a)
        b >>= 2;

    while (b != 0) {
        if (a >= result + b) {
            a -= result + b;
            result = result + 2 * b;
        }

        b >>= 2;
        result >>= 1;
    }
    return result * sign;
}

Unit wrap(Unit value, Unit mod) {
    return value >= 0 ? (value % mod) : (mod + (value % mod) - 1);
}

Unit clamp(Unit v, Unit min, Unit max) {
    return v >= min ? (v <= max ? v : max) : min;
}

Unit intSin(Unit x) {
    x = wrap(x / SIN_TABLE_UNIT_STEP, SIN_TABLE_LENGTH * 4);
    int8_t positive = 1;

    if (x < SIN_TABLE_LENGTH) {
    } else if (x < SIN_TABLE_LENGTH * 2) {
        x = SIN_TABLE_LENGTH * 2 - x - 1;
    } else if (x < SIN_TABLE_LENGTH * 3) {
        x = x - SIN_TABLE_LENGTH * 2;
        positive = 0;
    } else {
        x = SIN_TABLE_LENGTH - (x - SIN_TABLE_LENGTH * 3) - 1;
        positive = 0;
    }

    return positive ? sinTable[x] : -1 * sinTable[x];
}

Unit intASin(Unit x) {
    x = clamp(x,-FRACTIONS_PER_UNIT,FRACTIONS_PER_UNIT);

    int8_t sign = 1;
    if (x < 0) {
        sign = -1;
        x *= -1;
    }

    Unit low = 0;
    Unit high = SIN_TABLE_LENGTH -1;
    Unit middle;

    while (low <= high) {
        middle = (low + high) / 2;

        Unit v = sinTable[middle];

        if (v > x)
            high = middle - 1;
        else if (v < x)
            low = middle + 1;
        else
            break;
    }

    middle *= SIN_TABLE_UNIT_STEP;
    return sign * middle;
}

Unit intCos(Unit x) {
    return intSin(x + FRACTIONS_PER_UNIT / 4);
}
